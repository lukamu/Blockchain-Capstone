// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let squareVerifier = artifacts.require('SquareVerifier');
let base_proof = require('../../zokrates/code/square/proof');
    
contract('TestSquareVerifier', accounts => {
    const account1 = accounts[0];
    
    describe('test verification with correct proof', function(){
        beforeEach(async function () { 
            this.contract = await squareVerifier.new({from: account1});
        })

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

        it('verification with correct proof',async function(){            
            let verify = await this.contract.verifyTx.call (base_proof.proof.A, base_proof.proof.A_p, base_proof.proof.B, base_proof.proof.B_p,
                base_proof.proof.C, base_proof.proof.C_p, base_proof.proof.H, base_proof.proof.K, base_proof.input, {from:account1});

            assert.equal(verify, true, "verification is correct");
        })        

        it('verification with incorrect proof',async function(){        
            let verify = await this.contract.verifyTx.call (base_proof.proof.A, base_proof.proof.A_p, base_proof.proof.B, base_proof.proof.B_p,
                base_proof.proof.C, base_proof.proof.C_p, base_proof.proof.H, base_proof.proof.K, [12, 4], {from:account1});
                
            assert.equal(verify, false, "verification is incorrect");
        })
    })
});